<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <DisableUnsupportedError>true</DisableUnsupportedError>
    <AotPreferZig>false</AotPreferZig>
  </PropertyGroup>

  <UsingTask TaskName="PrependPathIfCrossCompile"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">

    <ParameterGroup>
      <MSBuildThisFileDirectory ParameterType="System.String" Required="true" />
      <RuntimeIdentifier ParameterType="System.String" Required="true" />
      <AotPreferZig ParameterType="System.Boolean" Required="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.Runtime.InteropServices" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            Console.WriteLine("Running custom toolchain environment setup for cross building...");
            var buildenv = "";
            var isWindows = false;
            var isDebug = Environment.GetEnvironmentVariable("DOTNET_FALLENWOOD_PUBLISHAOTCROSS") == bool.TrueString;
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux)) {
              var osDescription = RuntimeInformation.OSDescription;
              buildenv += "linux";
              if (osDescription.Contains("GNU")) {
                // noop
              } else if (osDescription.Contains("MUSL")) {
               buildenv += "-musl";
              } else {
                // TODO: android/loongarch/bionic/osx/ios
              }
            } else if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
              buildenv += "win";
              isWindows = true;
            }

            if (RuntimeInformation.OSArchitecture == Architecture.X64) {
              buildenv += "-x64";
            } else if (RuntimeInformation.OSArchitecture == Architecture.Arm64) {
              buildenv += "-arm64";
            } else if (RuntimeInformation.OSArchitecture == Architecture.Arm) {
              buildenv += "-arm";
            }

            if (buildenv != RuntimeIdentifier || AotPreferZig) {
              Environment.SetEnvironmentVariable("PATH", MSBuildThisFileDirectory + Path.PathSeparator + Environment.GetEnvironmentVariable("PATH"));

              if (!isWindows) {
                var cmd = new Process();
                cmd.StartInfo.FileName = "chmod";
                cmd.StartInfo.Arguments = "-R +x " + MSBuildThisFileDirectory;
                cmd.StartInfo.CreateNoWindow = true;
                cmd.StartInfo.UseShellExecute = false;
                cmd.Start();
                cmd.WaitForExit();
              }
              if (isDebug) { Console.WriteLine($"Adding {MSBuildThisFileDirectory} to PATH for cross building {RuntimeIdentifier} on {buildenv}"); }
            } else {
              if (isDebug) { Console.WriteLine($"Native building for {buildenv}, skip setting custom toolchain environment..."); }
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target
    Name="SetPathToClang"
    BeforeTargets="SetupOSSpecificProps">

    <PrependPathIfCrossCompile
      MSBuildThisFileDirectory="$(MSBuildThisFileDirectory)"
      RuntimeIdentifier="$(RuntimeIdentifier)"
      AotPreferZig="$(AotPreferZig)" />

  </Target>

  <!-- BEGIN: Works around ILCompiler targets not detecting this as a cross compilation -->
  <Target Name="OverwriteTargetTriple"
          AfterTargets="SetupOSSpecificProps"
          BeforeTargets="LinkNative">

    <PropertyGroup>
      <CrossCompileRid />
      <CrossCompileRid>$(RuntimeIdentifier)</CrossCompileRid>

      <CrossCompileArch />
      <CrossCompileArch Condition="$(CrossCompileRid.EndsWith('-x64'))">x86_64</CrossCompileArch>
      <CrossCompileArch Condition="$(CrossCompileRid.EndsWith('-arm64'))">aarch64</CrossCompileArch>
      <CrossCompileArch Condition="$(CrossCompileRid.EndsWith('-arm'))">arm</CrossCompileArch>

      <TargetTriple />
      <TargetTriple Condition="'$(CrossCompileArch)' != '' and $(CrossCompileRid.StartsWith('linux'))">$(CrossCompileArch)-linux-gnu</TargetTriple>
      <TargetTriple Condition="'$(CrossCompileArch)' != '' and ($(CrossCompileRid.StartsWith('linux-musl')) or $(CrossCompileRid.StartsWith('alpine')))">$(CrossCompileArch)-linux-musl</TargetTriple>
      <TargetTriple Condition="'$(CrossCompileArch)' == 'arm' and $(CrossCompileRid.StartsWith('linux-musl'))">thumb-linux-musleabihf</TargetTriple>
    </PropertyGroup>

    <ItemGroup>
      <LinkerArg Include="--target=$(TargetTriple)" />
    </ItemGroup>

  </Target>
  <!-- END: Works around ILCompiler targets not detecting this as a cross compilation -->

</Project>
